using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ResxHelperGenerator;


#pragma warning disable RS1036 // Specify analyzer banned API enforcement setting
public class CultureHelperGenerator : IIncrementalGenerator
#pragma warning restore RS1036 // Specify analyzer banned API enforcement setting
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // 1. 筛选 .resx 文件
        var resxFiles = context.AdditionalTextsProvider
            .Where(file => file.Path.EndsWith(".resx", StringComparison.OrdinalIgnoreCase));

        // 2. 提取 culture 信息
        var cultures = resxFiles
            .Select((file, _) =>
            {
                var fileName = Path.GetFileNameWithoutExtension(file.Path);
                var segments = fileName.Split('.');
                var last = segments.Last();

                if (last.Length == 2 || (last.Length >= 5 && last.Length <= 7 && last.Contains('-')))
                    return last;

                return null;
            })
            .Where(culture => culture is not null)
            .Collect()
            .Select((items, _) => items.Distinct().Prepend("en-US").ToArray()); // 默认添加 en-US

        // 3. 读取 RootNamespace
        var rootNamespace = context.AnalyzerConfigOptionsProvider
            .Select((provider, _) =>
                provider.GlobalOptions.TryGetValue("build_property.RootNamespace", out var ns) ? ns : "Generated");

        // 4. 读取 MSBuildProjectFullPath（项目绝对路径）
        var projectPath = context.AnalyzerConfigOptionsProvider
            .Select((provider, _) =>
                provider.GlobalOptions.TryGetValue("build_property.MSBuildProjectFullPath", out var path) ? path : null);

        // 5. 合并
        var merged = cultures
            .Combine(rootNamespace)
            .Combine(projectPath); // ((cultures, ns), path)

        // 6. 注册输出
        context.RegisterSourceOutput(merged, (spc, tuple) =>
        {
            var ((cultureList, ns), path) = tuple;
            GenerateCultureHelper(spc, ns, cultureList, path);
        });
    }

    private static void GenerateCultureHelper(SourceProductionContext context, string projectRootNamespace, string[] cultures, string projectFilePath)
    {
        var builder = new StringBuilder();
        builder.AppendLine("//------------------------------------------------------------------------------");
        builder.AppendLine("// <auto-generated>");
        builder.AppendLine("//     This code was generated by ResxHelperGenerator.");
        builder.AppendLine("// </auto-generated>");
        builder.AppendLine("//------------------------------------------------------------------------------");
        builder.AppendLine();
        builder.AppendLine($"namespace {projectRootNamespace};");
        builder.AppendLine();
        builder.AppendLine("public static class CultureHelper");
        builder.AppendLine("{");
        builder.AppendLine("    public static readonly string[] ApplicationCultures = new string[]");
        builder.AppendLine("    {");

        foreach (var culture in cultures)
        {
            builder.AppendLine($"        \"{culture}\",");
        }

        builder.AppendLine("    };");

        if (!string.IsNullOrEmpty(projectFilePath))
        {
            var rootPath = Path.GetDirectoryName(projectFilePath)?.Replace("\\", "\\\\") ?? "";
            builder.AppendLine();
            builder.AppendLine($"    // Project path: {projectFilePath}");
            builder.AppendLine($"    public const string ProjectRoot = @\"{rootPath}\";");
        }

        builder.AppendLine("}");

        context.AddSource("CultureHelper.g.cs", SourceText.From(builder.ToString(), Encoding.UTF8));
    }
}
